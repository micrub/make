#!/usr/bin/env node

var start = Date.now();

var fs = require('fs');
var exists = fs.existsSync;
var parse = require('..');
var exec = require('child_process').exec;

var argv = process.argv.slice(2);

// Init
var env = process.env;
env.path += ';./node_modules/.bin';

if (!exists('Bakefile')) return fail('No Bakefile in the current folder');

var file = fs.readFileSync('Bakefile', 'utf8');

var result = parse(file);

var targets = result.targets;
var variables = result.variables;

if (!argv[0]) argv[0] = 'all';

// Run

(function next(targetName) {
  if (!targetName) return end();

  executeTarget(targetName, function(err) {
    if (err) return fail(err);
    next(argv.shift());
  });
})(argv.shift());


// Functions

function executeTarget(targetName, cb) {
  if (!targets[targetName]) return cb(new Error('No target matching "' + targetName + '"'));

  console.log('\n... Invoking %s target ...\n', targetName);

  var target = targets[targetName];

  executeRecipe(target, targetName, function(err) {
    if (err) return cb(err);
    cb();
  });
}

function executeRecipe(target, targetName, cb) {
  var prerequities = target.prerequities;

  if (!prerequities.length) return executeRules(target, cb);

  executePrereq(target, function(err) {
    if (err) return fail(err);

    executeRules(target, cb);
  });

}

function executePrereq(target, cb) {
  var prerequities = target.prerequities;

  // Before executing this recipe, execute any prerequities first
  (function nextPrereq(pre) {
    if (!pre) return cb();

    executeTarget(pre, function(err) {
      if (err) return cb(err);
      nextPrereq(prerequities.shift());
    });

  })(prerequities.shift());
}

function executeRules(target, cb) {
  var lines = target.recipe.split(/\r?\n/);

  // Execute each recipe line in sequence
  (function nextLine(line) {
    if (!line) return cb();

    exec(line, { env: env }, function(err, stdout, stderr) {
      if (err) return cb(err);

      if (stdout) console.log('  ', stdout.trim());
      if (stderr) console.log('  ', stderr.trim());

      nextLine(lines.shift());
    });

  })(lines.shift());
}

function fail () {
  console.error.apply(console, arguments);
}

function end() {
  var time = Date.now() - start;

  console.log('\n... âœ“ Build sucess in %sms ...', time);
}
